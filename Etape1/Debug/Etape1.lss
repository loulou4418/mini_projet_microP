
Etape1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f10  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00000f10  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  20000004  00000f14  00020004  2**2
                  ALLOC
  3 .stack        00002000  20000040  00000f50  00020004  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000eecc  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001802  00000000  00000000  0002ef51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000d3a  00000000  00000000  00030753  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002d0  00000000  00000000  0003148d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000240  00000000  00000000  0003175d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017df6  00000000  00000000  0003199d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005a3e  00000000  00000000  00049793  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008b7dd  00000000  00000000  0004f1d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000086c  00000000  00000000  000da9b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	40 20 00 20 2d 0c 00 00 25 0d 00 00 25 0d 00 00     @ . -...%...%...
	...
  2c:	25 0d 00 00 00 00 00 00 00 00 00 00 25 0d 00 00     %...........%...
  3c:	25 0d 00 00 25 0d 00 00 25 0d 00 00 25 0d 00 00     %...%...%...%...
  4c:	25 0d 00 00 25 0d 00 00 25 0d 00 00 25 0d 00 00     %...%...%...%...
  5c:	25 0d 00 00 25 0d 00 00 25 0d 00 00 25 0d 00 00     %...%...%...%...
  6c:	25 0d 00 00 25 0d 00 00 25 0d 00 00 25 0d 00 00     %...%...%...%...
  7c:	25 0d 00 00 25 0d 00 00 25 0d 00 00 25 0d 00 00     %...%...%...%...
  8c:	25 0d 00 00 25 0d 00 00 25 0d 00 00 25 0d 00 00     %...%...%...%...
  9c:	25 0d 00 00 25 0d 00 00 25 0d 00 00 25 0d 00 00     %...%...%...%...
  ac:	25 0d 00 00 00 00 00 00                             %.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000004 	.word	0x20000004
  d4:	00000000 	.word	0x00000000
  d8:	00000f10 	.word	0x00000f10

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000008 	.word	0x20000008
 108:	00000f10 	.word	0x00000f10
 10c:	00000f10 	.word	0x00000f10
 110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
 114:	b580      	push	{r7, lr}
 116:	b082      	sub	sp, #8
 118:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
 11a:	4b10      	ldr	r3, [pc, #64]	; (15c <cpu_irq_enter_critical+0x48>)
 11c:	681b      	ldr	r3, [r3, #0]
 11e:	2b00      	cmp	r3, #0
 120:	d112      	bne.n	148 <cpu_irq_enter_critical+0x34>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 122:	f3ef 8310 	mrs	r3, PRIMASK
 126:	607b      	str	r3, [r7, #4]
  return(result);
 128:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
 12a:	2b00      	cmp	r3, #0
 12c:	d109      	bne.n	142 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 12e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 130:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
 134:	4b0a      	ldr	r3, [pc, #40]	; (160 <cpu_irq_enter_critical+0x4c>)
 136:	2200      	movs	r2, #0
 138:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
 13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <cpu_irq_enter_critical+0x50>)
 13c:	2201      	movs	r2, #1
 13e:	701a      	strb	r2, [r3, #0]
 140:	e002      	b.n	148 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
 142:	4b08      	ldr	r3, [pc, #32]	; (164 <cpu_irq_enter_critical+0x50>)
 144:	2200      	movs	r2, #0
 146:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
 148:	4b04      	ldr	r3, [pc, #16]	; (15c <cpu_irq_enter_critical+0x48>)
 14a:	681b      	ldr	r3, [r3, #0]
 14c:	1c5a      	adds	r2, r3, #1
 14e:	4b03      	ldr	r3, [pc, #12]	; (15c <cpu_irq_enter_critical+0x48>)
 150:	601a      	str	r2, [r3, #0]
}
 152:	46c0      	nop			; (mov r8, r8)
 154:	46bd      	mov	sp, r7
 156:	b002      	add	sp, #8
 158:	bd80      	pop	{r7, pc}
 15a:	46c0      	nop			; (mov r8, r8)
 15c:	20000020 	.word	0x20000020
 160:	20000000 	.word	0x20000000
 164:	20000024 	.word	0x20000024

00000168 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
 168:	b580      	push	{r7, lr}
 16a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
 16c:	4b0b      	ldr	r3, [pc, #44]	; (19c <cpu_irq_leave_critical+0x34>)
 16e:	681b      	ldr	r3, [r3, #0]
 170:	1e5a      	subs	r2, r3, #1
 172:	4b0a      	ldr	r3, [pc, #40]	; (19c <cpu_irq_leave_critical+0x34>)
 174:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
 176:	4b09      	ldr	r3, [pc, #36]	; (19c <cpu_irq_leave_critical+0x34>)
 178:	681b      	ldr	r3, [r3, #0]
 17a:	2b00      	cmp	r3, #0
 17c:	d10a      	bne.n	194 <cpu_irq_leave_critical+0x2c>
 17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <cpu_irq_leave_critical+0x38>)
 180:	781b      	ldrb	r3, [r3, #0]
 182:	b2db      	uxtb	r3, r3
 184:	2b00      	cmp	r3, #0
 186:	d005      	beq.n	194 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
 188:	4b06      	ldr	r3, [pc, #24]	; (1a4 <cpu_irq_leave_critical+0x3c>)
 18a:	2201      	movs	r2, #1
 18c:	701a      	strb	r2, [r3, #0]
 18e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 192:	b662      	cpsie	i
	}
}
 194:	46c0      	nop			; (mov r8, r8)
 196:	46bd      	mov	sp, r7
 198:	bd80      	pop	{r7, pc}
 19a:	46c0      	nop			; (mov r8, r8)
 19c:	20000020 	.word	0x20000020
 1a0:	20000024 	.word	0x20000024
 1a4:	20000000 	.word	0x20000000

000001a8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
 1a8:	b580      	push	{r7, lr}
 1aa:	b084      	sub	sp, #16
 1ac:	af00      	add	r7, sp, #0
 1ae:	0002      	movs	r2, r0
 1b0:	1dfb      	adds	r3, r7, #7
 1b2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
 1b4:	230f      	movs	r3, #15
 1b6:	18fb      	adds	r3, r7, r3
 1b8:	1dfa      	adds	r2, r7, #7
 1ba:	7812      	ldrb	r2, [r2, #0]
 1bc:	09d2      	lsrs	r2, r2, #7
 1be:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
 1c0:	230e      	movs	r3, #14
 1c2:	18fb      	adds	r3, r7, r3
 1c4:	1dfa      	adds	r2, r7, #7
 1c6:	7812      	ldrb	r2, [r2, #0]
 1c8:	0952      	lsrs	r2, r2, #5
 1ca:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
 1cc:	4b0d      	ldr	r3, [pc, #52]	; (204 <system_pinmux_get_group_from_gpio_pin+0x5c>)
 1ce:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
 1d0:	230f      	movs	r3, #15
 1d2:	18fb      	adds	r3, r7, r3
 1d4:	781b      	ldrb	r3, [r3, #0]
 1d6:	2b00      	cmp	r3, #0
 1d8:	d10f      	bne.n	1fa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
 1da:	230f      	movs	r3, #15
 1dc:	18fb      	adds	r3, r7, r3
 1de:	781b      	ldrb	r3, [r3, #0]
 1e0:	009b      	lsls	r3, r3, #2
 1e2:	2210      	movs	r2, #16
 1e4:	4694      	mov	ip, r2
 1e6:	44bc      	add	ip, r7
 1e8:	4463      	add	r3, ip
 1ea:	3b08      	subs	r3, #8
 1ec:	681a      	ldr	r2, [r3, #0]
 1ee:	230e      	movs	r3, #14
 1f0:	18fb      	adds	r3, r7, r3
 1f2:	781b      	ldrb	r3, [r3, #0]
 1f4:	01db      	lsls	r3, r3, #7
 1f6:	18d3      	adds	r3, r2, r3
 1f8:	e000      	b.n	1fc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
 1fa:	2300      	movs	r3, #0
	}
}
 1fc:	0018      	movs	r0, r3
 1fe:	46bd      	mov	sp, r7
 200:	b004      	add	sp, #16
 202:	bd80      	pop	{r7, pc}
 204:	41004400 	.word	0x41004400

00000208 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
 208:	b580      	push	{r7, lr}
 20a:	b082      	sub	sp, #8
 20c:	af00      	add	r7, sp, #0
 20e:	0002      	movs	r2, r0
 210:	1dfb      	adds	r3, r7, #7
 212:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
 214:	1dfb      	adds	r3, r7, #7
 216:	781b      	ldrb	r3, [r3, #0]
 218:	0018      	movs	r0, r3
 21a:	4b03      	ldr	r3, [pc, #12]	; (228 <port_get_group_from_gpio_pin+0x20>)
 21c:	4798      	blx	r3
 21e:	0003      	movs	r3, r0
}
 220:	0018      	movs	r0, r3
 222:	46bd      	mov	sp, r7
 224:	b002      	add	sp, #8
 226:	bd80      	pop	{r7, pc}
 228:	000001a9 	.word	0x000001a9

0000022c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
 22c:	b580      	push	{r7, lr}
 22e:	b082      	sub	sp, #8
 230:	af00      	add	r7, sp, #0
 232:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
 234:	687b      	ldr	r3, [r7, #4]
 236:	2200      	movs	r2, #0
 238:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
 23a:	687b      	ldr	r3, [r7, #4]
 23c:	2201      	movs	r2, #1
 23e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
 240:	687b      	ldr	r3, [r7, #4]
 242:	2200      	movs	r2, #0
 244:	709a      	strb	r2, [r3, #2]
}
 246:	46c0      	nop			; (mov r8, r8)
 248:	46bd      	mov	sp, r7
 24a:	b002      	add	sp, #8
 24c:	bd80      	pop	{r7, pc}
	...

00000250 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
 250:	b580      	push	{r7, lr}
 252:	b084      	sub	sp, #16
 254:	af00      	add	r7, sp, #0
 256:	0002      	movs	r2, r0
 258:	1dfb      	adds	r3, r7, #7
 25a:	701a      	strb	r2, [r3, #0]
 25c:	1dbb      	adds	r3, r7, #6
 25e:	1c0a      	adds	r2, r1, #0
 260:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
 262:	1dfb      	adds	r3, r7, #7
 264:	781b      	ldrb	r3, [r3, #0]
 266:	0018      	movs	r0, r3
 268:	4b0d      	ldr	r3, [pc, #52]	; (2a0 <port_pin_set_output_level+0x50>)
 26a:	4798      	blx	r3
 26c:	0003      	movs	r3, r0
 26e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
 270:	1dfb      	adds	r3, r7, #7
 272:	781b      	ldrb	r3, [r3, #0]
 274:	221f      	movs	r2, #31
 276:	4013      	ands	r3, r2
 278:	2201      	movs	r2, #1
 27a:	409a      	lsls	r2, r3
 27c:	0013      	movs	r3, r2
 27e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
 280:	1dbb      	adds	r3, r7, #6
 282:	781b      	ldrb	r3, [r3, #0]
 284:	2b00      	cmp	r3, #0
 286:	d003      	beq.n	290 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
 288:	68fb      	ldr	r3, [r7, #12]
 28a:	68ba      	ldr	r2, [r7, #8]
 28c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
 28e:	e002      	b.n	296 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
 290:	68fb      	ldr	r3, [r7, #12]
 292:	68ba      	ldr	r2, [r7, #8]
 294:	615a      	str	r2, [r3, #20]
}
 296:	46c0      	nop			; (mov r8, r8)
 298:	46bd      	mov	sp, r7
 29a:	b004      	add	sp, #16
 29c:	bd80      	pop	{r7, pc}
 29e:	46c0      	nop			; (mov r8, r8)
 2a0:	00000209 	.word	0x00000209

000002a4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
 2a4:	b580      	push	{r7, lr}
 2a6:	b082      	sub	sp, #8
 2a8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
 2aa:	1d3b      	adds	r3, r7, #4
 2ac:	0018      	movs	r0, r3
 2ae:	4b0e      	ldr	r3, [pc, #56]	; (2e8 <system_board_init+0x44>)
 2b0:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
 2b2:	1d3b      	adds	r3, r7, #4
 2b4:	2201      	movs	r2, #1
 2b6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
 2b8:	1d3b      	adds	r3, r7, #4
 2ba:	0019      	movs	r1, r3
 2bc:	203e      	movs	r0, #62	; 0x3e
 2be:	4b0b      	ldr	r3, [pc, #44]	; (2ec <system_board_init+0x48>)
 2c0:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
 2c2:	2101      	movs	r1, #1
 2c4:	203e      	movs	r0, #62	; 0x3e
 2c6:	4b0a      	ldr	r3, [pc, #40]	; (2f0 <system_board_init+0x4c>)
 2c8:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
 2ca:	1d3b      	adds	r3, r7, #4
 2cc:	2200      	movs	r2, #0
 2ce:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
 2d0:	1d3b      	adds	r3, r7, #4
 2d2:	2201      	movs	r2, #1
 2d4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
 2d6:	1d3b      	adds	r3, r7, #4
 2d8:	0019      	movs	r1, r3
 2da:	200f      	movs	r0, #15
 2dc:	4b03      	ldr	r3, [pc, #12]	; (2ec <system_board_init+0x48>)
 2de:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
 2e0:	46c0      	nop			; (mov r8, r8)
 2e2:	46bd      	mov	sp, r7
 2e4:	b002      	add	sp, #8
 2e6:	bd80      	pop	{r7, pc}
 2e8:	0000022d 	.word	0x0000022d
 2ec:	0000031d 	.word	0x0000031d
 2f0:	00000251 	.word	0x00000251

000002f4 <system_pinmux_get_config_defaults>:
{
 2f4:	b580      	push	{r7, lr}
 2f6:	b082      	sub	sp, #8
 2f8:	af00      	add	r7, sp, #0
 2fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
 2fc:	687b      	ldr	r3, [r7, #4]
 2fe:	2280      	movs	r2, #128	; 0x80
 300:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
 302:	687b      	ldr	r3, [r7, #4]
 304:	2200      	movs	r2, #0
 306:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
 308:	687b      	ldr	r3, [r7, #4]
 30a:	2201      	movs	r2, #1
 30c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
 30e:	687b      	ldr	r3, [r7, #4]
 310:	2200      	movs	r2, #0
 312:	70da      	strb	r2, [r3, #3]
}
 314:	46c0      	nop			; (mov r8, r8)
 316:	46bd      	mov	sp, r7
 318:	b002      	add	sp, #8
 31a:	bd80      	pop	{r7, pc}

0000031c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
 31c:	b580      	push	{r7, lr}
 31e:	b084      	sub	sp, #16
 320:	af00      	add	r7, sp, #0
 322:	0002      	movs	r2, r0
 324:	6039      	str	r1, [r7, #0]
 326:	1dfb      	adds	r3, r7, #7
 328:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
 32a:	230c      	movs	r3, #12
 32c:	18fb      	adds	r3, r7, r3
 32e:	0018      	movs	r0, r3
 330:	4b10      	ldr	r3, [pc, #64]	; (374 <port_pin_set_config+0x58>)
 332:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
 334:	230c      	movs	r3, #12
 336:	18fb      	adds	r3, r7, r3
 338:	2280      	movs	r2, #128	; 0x80
 33a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
 33c:	683b      	ldr	r3, [r7, #0]
 33e:	781a      	ldrb	r2, [r3, #0]
 340:	230c      	movs	r3, #12
 342:	18fb      	adds	r3, r7, r3
 344:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
 346:	683b      	ldr	r3, [r7, #0]
 348:	785a      	ldrb	r2, [r3, #1]
 34a:	230c      	movs	r3, #12
 34c:	18fb      	adds	r3, r7, r3
 34e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
 350:	683b      	ldr	r3, [r7, #0]
 352:	789a      	ldrb	r2, [r3, #2]
 354:	230c      	movs	r3, #12
 356:	18fb      	adds	r3, r7, r3
 358:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
 35a:	230c      	movs	r3, #12
 35c:	18fa      	adds	r2, r7, r3
 35e:	1dfb      	adds	r3, r7, #7
 360:	781b      	ldrb	r3, [r3, #0]
 362:	0011      	movs	r1, r2
 364:	0018      	movs	r0, r3
 366:	4b04      	ldr	r3, [pc, #16]	; (378 <port_pin_set_config+0x5c>)
 368:	4798      	blx	r3
}
 36a:	46c0      	nop			; (mov r8, r8)
 36c:	46bd      	mov	sp, r7
 36e:	b004      	add	sp, #16
 370:	bd80      	pop	{r7, pc}
 372:	46c0      	nop			; (mov r8, r8)
 374:	000002f5 	.word	0x000002f5
 378:	00000ba5 	.word	0x00000ba5

0000037c <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
 37c:	b580      	push	{r7, lr}
 37e:	b082      	sub	sp, #8
 380:	af00      	add	r7, sp, #0
 382:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
 384:	687b      	ldr	r3, [r7, #4]
 386:	2201      	movs	r2, #1
 388:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
 38a:	687b      	ldr	r3, [r7, #4]
 38c:	2200      	movs	r2, #0
 38e:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
 390:	687b      	ldr	r3, [r7, #4]
 392:	2206      	movs	r2, #6
 394:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
 396:	687b      	ldr	r3, [r7, #4]
 398:	2200      	movs	r2, #0
 39a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
 39c:	687b      	ldr	r3, [r7, #4]
 39e:	2200      	movs	r2, #0
 3a0:	725a      	strb	r2, [r3, #9]
}
 3a2:	46c0      	nop			; (mov r8, r8)
 3a4:	46bd      	mov	sp, r7
 3a6:	b002      	add	sp, #8
 3a8:	bd80      	pop	{r7, pc}

000003aa <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
 3aa:	b580      	push	{r7, lr}
 3ac:	b082      	sub	sp, #8
 3ae:	af00      	add	r7, sp, #0
 3b0:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
 3b2:	687b      	ldr	r3, [r7, #4]
 3b4:	2203      	movs	r2, #3
 3b6:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
 3b8:	687b      	ldr	r3, [r7, #4]
 3ba:	2200      	movs	r2, #0
 3bc:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
 3be:	687b      	ldr	r3, [r7, #4]
 3c0:	2201      	movs	r2, #1
 3c2:	709a      	strb	r2, [r3, #2]
}
 3c4:	46c0      	nop			; (mov r8, r8)
 3c6:	46bd      	mov	sp, r7
 3c8:	b002      	add	sp, #8
 3ca:	bd80      	pop	{r7, pc}

000003cc <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
 3cc:	b580      	push	{r7, lr}
 3ce:	b082      	sub	sp, #8
 3d0:	af00      	add	r7, sp, #0
 3d2:	0002      	movs	r2, r0
 3d4:	1dfb      	adds	r3, r7, #7
 3d6:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
 3d8:	4a03      	ldr	r2, [pc, #12]	; (3e8 <system_cpu_clock_set_divider+0x1c>)
 3da:	1dfb      	adds	r3, r7, #7
 3dc:	781b      	ldrb	r3, [r3, #0]
 3de:	7213      	strb	r3, [r2, #8]
}
 3e0:	46c0      	nop			; (mov r8, r8)
 3e2:	46bd      	mov	sp, r7
 3e4:	b002      	add	sp, #8
 3e6:	bd80      	pop	{r7, pc}
 3e8:	40000400 	.word	0x40000400

000003ec <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
 3ec:	b580      	push	{r7, lr}
 3ee:	b082      	sub	sp, #8
 3f0:	af00      	add	r7, sp, #0
 3f2:	0002      	movs	r2, r0
 3f4:	1dfb      	adds	r3, r7, #7
 3f6:	701a      	strb	r2, [r3, #0]
 3f8:	1dbb      	adds	r3, r7, #6
 3fa:	1c0a      	adds	r2, r1, #0
 3fc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
 3fe:	1dfb      	adds	r3, r7, #7
 400:	781b      	ldrb	r3, [r3, #0]
 402:	2b01      	cmp	r3, #1
 404:	d008      	beq.n	418 <system_apb_clock_set_divider+0x2c>
 406:	2b02      	cmp	r3, #2
 408:	d00b      	beq.n	422 <system_apb_clock_set_divider+0x36>
 40a:	2b00      	cmp	r3, #0
 40c:	d10e      	bne.n	42c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
 40e:	4a0b      	ldr	r2, [pc, #44]	; (43c <system_apb_clock_set_divider+0x50>)
 410:	1dbb      	adds	r3, r7, #6
 412:	781b      	ldrb	r3, [r3, #0]
 414:	7253      	strb	r3, [r2, #9]
			break;
 416:	e00b      	b.n	430 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
 418:	4a08      	ldr	r2, [pc, #32]	; (43c <system_apb_clock_set_divider+0x50>)
 41a:	1dbb      	adds	r3, r7, #6
 41c:	781b      	ldrb	r3, [r3, #0]
 41e:	7293      	strb	r3, [r2, #10]
			break;
 420:	e006      	b.n	430 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
 422:	4a06      	ldr	r2, [pc, #24]	; (43c <system_apb_clock_set_divider+0x50>)
 424:	1dbb      	adds	r3, r7, #6
 426:	781b      	ldrb	r3, [r3, #0]
 428:	72d3      	strb	r3, [r2, #11]
			break;
 42a:	e001      	b.n	430 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
 42c:	2317      	movs	r3, #23
 42e:	e000      	b.n	432 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
 430:	2300      	movs	r3, #0
}
 432:	0018      	movs	r0, r3
 434:	46bd      	mov	sp, r7
 436:	b002      	add	sp, #8
 438:	bd80      	pop	{r7, pc}
 43a:	46c0      	nop			; (mov r8, r8)
 43c:	40000400 	.word	0x40000400

00000440 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
 440:	b580      	push	{r7, lr}
 442:	b082      	sub	sp, #8
 444:	af00      	add	r7, sp, #0
 446:	0002      	movs	r2, r0
 448:	1dfb      	adds	r3, r7, #7
 44a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
 44c:	4a08      	ldr	r2, [pc, #32]	; (470 <system_flash_set_waitstates+0x30>)
 44e:	1dfb      	adds	r3, r7, #7
 450:	781b      	ldrb	r3, [r3, #0]
 452:	210f      	movs	r1, #15
 454:	400b      	ands	r3, r1
 456:	b2d9      	uxtb	r1, r3
 458:	6853      	ldr	r3, [r2, #4]
 45a:	200f      	movs	r0, #15
 45c:	4001      	ands	r1, r0
 45e:	0049      	lsls	r1, r1, #1
 460:	201e      	movs	r0, #30
 462:	4383      	bics	r3, r0
 464:	430b      	orrs	r3, r1
 466:	6053      	str	r3, [r2, #4]
}
 468:	46c0      	nop			; (mov r8, r8)
 46a:	46bd      	mov	sp, r7
 46c:	b002      	add	sp, #8
 46e:	bd80      	pop	{r7, pc}
 470:	41004000 	.word	0x41004000

00000474 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
 474:	b580      	push	{r7, lr}
 476:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
 478:	46c0      	nop			; (mov r8, r8)
 47a:	4b04      	ldr	r3, [pc, #16]	; (48c <_system_dfll_wait_for_sync+0x18>)
 47c:	68db      	ldr	r3, [r3, #12]
 47e:	2210      	movs	r2, #16
 480:	4013      	ands	r3, r2
 482:	d0fa      	beq.n	47a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
 484:	46c0      	nop			; (mov r8, r8)
 486:	46bd      	mov	sp, r7
 488:	bd80      	pop	{r7, pc}
 48a:	46c0      	nop			; (mov r8, r8)
 48c:	40000800 	.word	0x40000800

00000490 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
 490:	b580      	push	{r7, lr}
 492:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
 494:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
 496:	2202      	movs	r2, #2
 498:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
 49a:	4b0c      	ldr	r3, [pc, #48]	; (4cc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
 49c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
 49e:	4a0a      	ldr	r2, [pc, #40]	; (4c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
 4a0:	4b0b      	ldr	r3, [pc, #44]	; (4d0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
 4a2:	689b      	ldr	r3, [r3, #8]
 4a4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
 4a6:	4a08      	ldr	r2, [pc, #32]	; (4c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
 4a8:	4b09      	ldr	r3, [pc, #36]	; (4d0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
 4aa:	685b      	ldr	r3, [r3, #4]
 4ac:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
 4ae:	4b06      	ldr	r3, [pc, #24]	; (4c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
 4b0:	2200      	movs	r2, #0
 4b2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
 4b4:	4b05      	ldr	r3, [pc, #20]	; (4cc <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
 4b6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
 4b8:	4a03      	ldr	r2, [pc, #12]	; (4c8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
 4ba:	4b05      	ldr	r3, [pc, #20]	; (4d0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
 4bc:	681b      	ldr	r3, [r3, #0]
 4be:	b29b      	uxth	r3, r3
 4c0:	8493      	strh	r3, [r2, #36]	; 0x24
}
 4c2:	46c0      	nop			; (mov r8, r8)
 4c4:	46bd      	mov	sp, r7
 4c6:	bd80      	pop	{r7, pc}
 4c8:	40000800 	.word	0x40000800
 4cc:	00000475 	.word	0x00000475
 4d0:	20000028 	.word	0x20000028

000004d4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
 4d4:	b580      	push	{r7, lr}
 4d6:	b084      	sub	sp, #16
 4d8:	af00      	add	r7, sp, #0
 4da:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
 4dc:	4b1a      	ldr	r3, [pc, #104]	; (548 <system_clock_source_osc8m_set_config+0x74>)
 4de:	6a1b      	ldr	r3, [r3, #32]
 4e0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
 4e2:	687b      	ldr	r3, [r7, #4]
 4e4:	781b      	ldrb	r3, [r3, #0]
 4e6:	1c1a      	adds	r2, r3, #0
 4e8:	2303      	movs	r3, #3
 4ea:	4013      	ands	r3, r2
 4ec:	b2da      	uxtb	r2, r3
 4ee:	230d      	movs	r3, #13
 4f0:	18fb      	adds	r3, r7, r3
 4f2:	2103      	movs	r1, #3
 4f4:	400a      	ands	r2, r1
 4f6:	0010      	movs	r0, r2
 4f8:	781a      	ldrb	r2, [r3, #0]
 4fa:	2103      	movs	r1, #3
 4fc:	438a      	bics	r2, r1
 4fe:	1c11      	adds	r1, r2, #0
 500:	1c02      	adds	r2, r0, #0
 502:	430a      	orrs	r2, r1
 504:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
 506:	687b      	ldr	r3, [r7, #4]
 508:	789a      	ldrb	r2, [r3, #2]
 50a:	230c      	movs	r3, #12
 50c:	18fb      	adds	r3, r7, r3
 50e:	01d0      	lsls	r0, r2, #7
 510:	781a      	ldrb	r2, [r3, #0]
 512:	217f      	movs	r1, #127	; 0x7f
 514:	400a      	ands	r2, r1
 516:	1c11      	adds	r1, r2, #0
 518:	1c02      	adds	r2, r0, #0
 51a:	430a      	orrs	r2, r1
 51c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
 51e:	687b      	ldr	r3, [r7, #4]
 520:	785a      	ldrb	r2, [r3, #1]
 522:	230c      	movs	r3, #12
 524:	18fb      	adds	r3, r7, r3
 526:	2101      	movs	r1, #1
 528:	400a      	ands	r2, r1
 52a:	0190      	lsls	r0, r2, #6
 52c:	781a      	ldrb	r2, [r3, #0]
 52e:	2140      	movs	r1, #64	; 0x40
 530:	438a      	bics	r2, r1
 532:	1c11      	adds	r1, r2, #0
 534:	1c02      	adds	r2, r0, #0
 536:	430a      	orrs	r2, r1
 538:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
 53a:	4b03      	ldr	r3, [pc, #12]	; (548 <system_clock_source_osc8m_set_config+0x74>)
 53c:	68fa      	ldr	r2, [r7, #12]
 53e:	621a      	str	r2, [r3, #32]
}
 540:	46c0      	nop			; (mov r8, r8)
 542:	46bd      	mov	sp, r7
 544:	b004      	add	sp, #16
 546:	bd80      	pop	{r7, pc}
 548:	40000800 	.word	0x40000800

0000054c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
 54c:	b580      	push	{r7, lr}
 54e:	b082      	sub	sp, #8
 550:	af00      	add	r7, sp, #0
 552:	0002      	movs	r2, r0
 554:	1dfb      	adds	r3, r7, #7
 556:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
 558:	1dfb      	adds	r3, r7, #7
 55a:	781b      	ldrb	r3, [r3, #0]
 55c:	2b08      	cmp	r3, #8
 55e:	d83b      	bhi.n	5d8 <system_clock_source_enable+0x8c>
 560:	009a      	lsls	r2, r3, #2
 562:	4b21      	ldr	r3, [pc, #132]	; (5e8 <system_clock_source_enable+0x9c>)
 564:	18d3      	adds	r3, r2, r3
 566:	681b      	ldr	r3, [r3, #0]
 568:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
 56a:	4b20      	ldr	r3, [pc, #128]	; (5ec <system_clock_source_enable+0xa0>)
 56c:	4a1f      	ldr	r2, [pc, #124]	; (5ec <system_clock_source_enable+0xa0>)
 56e:	6a12      	ldr	r2, [r2, #32]
 570:	2102      	movs	r1, #2
 572:	430a      	orrs	r2, r1
 574:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
 576:	2300      	movs	r3, #0
 578:	e031      	b.n	5de <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
 57a:	4b1c      	ldr	r3, [pc, #112]	; (5ec <system_clock_source_enable+0xa0>)
 57c:	4a1b      	ldr	r2, [pc, #108]	; (5ec <system_clock_source_enable+0xa0>)
 57e:	6992      	ldr	r2, [r2, #24]
 580:	2102      	movs	r1, #2
 582:	430a      	orrs	r2, r1
 584:	619a      	str	r2, [r3, #24]
		break;
 586:	e029      	b.n	5dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
 588:	4a18      	ldr	r2, [pc, #96]	; (5ec <system_clock_source_enable+0xa0>)
 58a:	4b18      	ldr	r3, [pc, #96]	; (5ec <system_clock_source_enable+0xa0>)
 58c:	8a1b      	ldrh	r3, [r3, #16]
 58e:	b29b      	uxth	r3, r3
 590:	2102      	movs	r1, #2
 592:	430b      	orrs	r3, r1
 594:	b29b      	uxth	r3, r3
 596:	8213      	strh	r3, [r2, #16]
		break;
 598:	e020      	b.n	5dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
 59a:	4a14      	ldr	r2, [pc, #80]	; (5ec <system_clock_source_enable+0xa0>)
 59c:	4b13      	ldr	r3, [pc, #76]	; (5ec <system_clock_source_enable+0xa0>)
 59e:	8a9b      	ldrh	r3, [r3, #20]
 5a0:	b29b      	uxth	r3, r3
 5a2:	2102      	movs	r1, #2
 5a4:	430b      	orrs	r3, r1
 5a6:	b29b      	uxth	r3, r3
 5a8:	8293      	strh	r3, [r2, #20]
		break;
 5aa:	e017      	b.n	5dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
 5ac:	4b10      	ldr	r3, [pc, #64]	; (5f0 <system_clock_source_enable+0xa4>)
 5ae:	681b      	ldr	r3, [r3, #0]
 5b0:	2202      	movs	r2, #2
 5b2:	431a      	orrs	r2, r3
 5b4:	4b0e      	ldr	r3, [pc, #56]	; (5f0 <system_clock_source_enable+0xa4>)
 5b6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
 5b8:	4b0e      	ldr	r3, [pc, #56]	; (5f4 <system_clock_source_enable+0xa8>)
 5ba:	4798      	blx	r3
		break;
 5bc:	e00e      	b.n	5dc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
 5be:	4a0b      	ldr	r2, [pc, #44]	; (5ec <system_clock_source_enable+0xa0>)
 5c0:	490a      	ldr	r1, [pc, #40]	; (5ec <system_clock_source_enable+0xa0>)
 5c2:	2344      	movs	r3, #68	; 0x44
 5c4:	5ccb      	ldrb	r3, [r1, r3]
 5c6:	b2db      	uxtb	r3, r3
 5c8:	2102      	movs	r1, #2
 5ca:	430b      	orrs	r3, r1
 5cc:	b2d9      	uxtb	r1, r3
 5ce:	2344      	movs	r3, #68	; 0x44
 5d0:	54d1      	strb	r1, [r2, r3]
		break;
 5d2:	e003      	b.n	5dc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
 5d4:	2300      	movs	r3, #0
 5d6:	e002      	b.n	5de <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
 5d8:	2317      	movs	r3, #23
 5da:	e000      	b.n	5de <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
 5dc:	2300      	movs	r3, #0
}
 5de:	0018      	movs	r0, r3
 5e0:	46bd      	mov	sp, r7
 5e2:	b002      	add	sp, #8
 5e4:	bd80      	pop	{r7, pc}
 5e6:	46c0      	nop			; (mov r8, r8)
 5e8:	00000ecc 	.word	0x00000ecc
 5ec:	40000800 	.word	0x40000800
 5f0:	20000028 	.word	0x20000028
 5f4:	00000491 	.word	0x00000491

000005f8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
 5f8:	b580      	push	{r7, lr}
 5fa:	b082      	sub	sp, #8
 5fc:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
 5fe:	003b      	movs	r3, r7
 600:	2201      	movs	r2, #1
 602:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 604:	2300      	movs	r3, #0
 606:	607b      	str	r3, [r7, #4]
 608:	e009      	b.n	61e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
 60a:	687b      	ldr	r3, [r7, #4]
 60c:	b2db      	uxtb	r3, r3
 60e:	003a      	movs	r2, r7
 610:	0011      	movs	r1, r2
 612:	0018      	movs	r0, r3
 614:	4b05      	ldr	r3, [pc, #20]	; (62c <_switch_peripheral_gclk+0x34>)
 616:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
 618:	687b      	ldr	r3, [r7, #4]
 61a:	3301      	adds	r3, #1
 61c:	607b      	str	r3, [r7, #4]
 61e:	687b      	ldr	r3, [r7, #4]
 620:	2b24      	cmp	r3, #36	; 0x24
 622:	d9f2      	bls.n	60a <_switch_peripheral_gclk+0x12>
	}
}
 624:	46c0      	nop			; (mov r8, r8)
 626:	46bd      	mov	sp, r7
 628:	b002      	add	sp, #8
 62a:	bd80      	pop	{r7, pc}
 62c:	00000959 	.word	0x00000959

00000630 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
 630:	b580      	push	{r7, lr}
 632:	b0a0      	sub	sp, #128	; 0x80
 634:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 636:	4b27      	ldr	r3, [pc, #156]	; (6d4 <system_clock_init+0xa4>)
 638:	22c2      	movs	r2, #194	; 0xc2
 63a:	00d2      	lsls	r2, r2, #3
 63c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
 63e:	2000      	movs	r0, #0
 640:	4b25      	ldr	r3, [pc, #148]	; (6d8 <system_clock_init+0xa8>)
 642:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
 644:	4b25      	ldr	r3, [pc, #148]	; (6dc <system_clock_init+0xac>)
 646:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
 648:	237c      	movs	r3, #124	; 0x7c
 64a:	18fb      	adds	r3, r7, r3
 64c:	0018      	movs	r0, r3
 64e:	4b24      	ldr	r3, [pc, #144]	; (6e0 <system_clock_init+0xb0>)
 650:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
 652:	237c      	movs	r3, #124	; 0x7c
 654:	18fb      	adds	r3, r7, r3
 656:	2200      	movs	r2, #0
 658:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
 65a:	237c      	movs	r3, #124	; 0x7c
 65c:	18fb      	adds	r3, r7, r3
 65e:	2201      	movs	r2, #1
 660:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
 662:	237c      	movs	r3, #124	; 0x7c
 664:	18fb      	adds	r3, r7, r3
 666:	2200      	movs	r2, #0
 668:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
 66a:	237c      	movs	r3, #124	; 0x7c
 66c:	18fb      	adds	r3, r7, r3
 66e:	0018      	movs	r0, r3
 670:	4b1c      	ldr	r3, [pc, #112]	; (6e4 <system_clock_init+0xb4>)
 672:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
 674:	2006      	movs	r0, #6
 676:	4b1c      	ldr	r3, [pc, #112]	; (6e8 <system_clock_init+0xb8>)
 678:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
 67a:	4b1c      	ldr	r3, [pc, #112]	; (6ec <system_clock_init+0xbc>)
 67c:	4798      	blx	r3

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
 67e:	2000      	movs	r0, #0
 680:	4b1b      	ldr	r3, [pc, #108]	; (6f0 <system_clock_init+0xc0>)
 682:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
 684:	2100      	movs	r1, #0
 686:	2000      	movs	r0, #0
 688:	4b1a      	ldr	r3, [pc, #104]	; (6f4 <system_clock_init+0xc4>)
 68a:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
 68c:	2100      	movs	r1, #0
 68e:	2001      	movs	r0, #1
 690:	4b18      	ldr	r3, [pc, #96]	; (6f4 <system_clock_init+0xc4>)
 692:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
 694:	2100      	movs	r1, #0
 696:	2002      	movs	r0, #2
 698:	4b16      	ldr	r3, [pc, #88]	; (6f4 <system_clock_init+0xc4>)
 69a:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
 69c:	1d3b      	adds	r3, r7, #4
 69e:	0018      	movs	r0, r3
 6a0:	4b15      	ldr	r3, [pc, #84]	; (6f8 <system_clock_init+0xc8>)
 6a2:	4798      	blx	r3
 6a4:	1d3b      	adds	r3, r7, #4
 6a6:	2206      	movs	r2, #6
 6a8:	701a      	strb	r2, [r3, #0]
 6aa:	1d3b      	adds	r3, r7, #4
 6ac:	2201      	movs	r2, #1
 6ae:	605a      	str	r2, [r3, #4]
 6b0:	1d3b      	adds	r3, r7, #4
 6b2:	2200      	movs	r2, #0
 6b4:	721a      	strb	r2, [r3, #8]
 6b6:	1d3b      	adds	r3, r7, #4
 6b8:	2200      	movs	r2, #0
 6ba:	725a      	strb	r2, [r3, #9]
 6bc:	1d3b      	adds	r3, r7, #4
 6be:	0019      	movs	r1, r3
 6c0:	2000      	movs	r0, #0
 6c2:	4b0e      	ldr	r3, [pc, #56]	; (6fc <system_clock_init+0xcc>)
 6c4:	4798      	blx	r3
 6c6:	2000      	movs	r0, #0
 6c8:	4b0d      	ldr	r3, [pc, #52]	; (700 <system_clock_init+0xd0>)
 6ca:	4798      	blx	r3
#endif
}
 6cc:	46c0      	nop			; (mov r8, r8)
 6ce:	46bd      	mov	sp, r7
 6d0:	b020      	add	sp, #128	; 0x80
 6d2:	bd80      	pop	{r7, pc}
 6d4:	40000800 	.word	0x40000800
 6d8:	00000441 	.word	0x00000441
 6dc:	000005f9 	.word	0x000005f9
 6e0:	000003ab 	.word	0x000003ab
 6e4:	000004d5 	.word	0x000004d5
 6e8:	0000054d 	.word	0x0000054d
 6ec:	000007a9 	.word	0x000007a9
 6f0:	000003cd 	.word	0x000003cd
 6f4:	000003ed 	.word	0x000003ed
 6f8:	0000037d 	.word	0x0000037d
 6fc:	000007d9 	.word	0x000007d9
 700:	000008fd 	.word	0x000008fd

00000704 <system_apb_clock_set_mask>:
{
 704:	b580      	push	{r7, lr}
 706:	b082      	sub	sp, #8
 708:	af00      	add	r7, sp, #0
 70a:	0002      	movs	r2, r0
 70c:	6039      	str	r1, [r7, #0]
 70e:	1dfb      	adds	r3, r7, #7
 710:	701a      	strb	r2, [r3, #0]
	switch (bus) {
 712:	1dfb      	adds	r3, r7, #7
 714:	781b      	ldrb	r3, [r3, #0]
 716:	2b01      	cmp	r3, #1
 718:	d00a      	beq.n	730 <system_apb_clock_set_mask+0x2c>
 71a:	2b02      	cmp	r3, #2
 71c:	d00f      	beq.n	73e <system_apb_clock_set_mask+0x3a>
 71e:	2b00      	cmp	r3, #0
 720:	d114      	bne.n	74c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
 722:	4b0e      	ldr	r3, [pc, #56]	; (75c <system_apb_clock_set_mask+0x58>)
 724:	4a0d      	ldr	r2, [pc, #52]	; (75c <system_apb_clock_set_mask+0x58>)
 726:	6991      	ldr	r1, [r2, #24]
 728:	683a      	ldr	r2, [r7, #0]
 72a:	430a      	orrs	r2, r1
 72c:	619a      	str	r2, [r3, #24]
			break;
 72e:	e00f      	b.n	750 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
 730:	4b0a      	ldr	r3, [pc, #40]	; (75c <system_apb_clock_set_mask+0x58>)
 732:	4a0a      	ldr	r2, [pc, #40]	; (75c <system_apb_clock_set_mask+0x58>)
 734:	69d1      	ldr	r1, [r2, #28]
 736:	683a      	ldr	r2, [r7, #0]
 738:	430a      	orrs	r2, r1
 73a:	61da      	str	r2, [r3, #28]
			break;
 73c:	e008      	b.n	750 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
 73e:	4b07      	ldr	r3, [pc, #28]	; (75c <system_apb_clock_set_mask+0x58>)
 740:	4a06      	ldr	r2, [pc, #24]	; (75c <system_apb_clock_set_mask+0x58>)
 742:	6a11      	ldr	r1, [r2, #32]
 744:	683a      	ldr	r2, [r7, #0]
 746:	430a      	orrs	r2, r1
 748:	621a      	str	r2, [r3, #32]
			break;
 74a:	e001      	b.n	750 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
 74c:	2317      	movs	r3, #23
 74e:	e000      	b.n	752 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
 750:	2300      	movs	r3, #0
}
 752:	0018      	movs	r0, r3
 754:	46bd      	mov	sp, r7
 756:	b002      	add	sp, #8
 758:	bd80      	pop	{r7, pc}
 75a:	46c0      	nop			; (mov r8, r8)
 75c:	40000400 	.word	0x40000400

00000760 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
 760:	b580      	push	{r7, lr}
 762:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
 764:	4b02      	ldr	r3, [pc, #8]	; (770 <system_interrupt_enter_critical_section+0x10>)
 766:	4798      	blx	r3
}
 768:	46c0      	nop			; (mov r8, r8)
 76a:	46bd      	mov	sp, r7
 76c:	bd80      	pop	{r7, pc}
 76e:	46c0      	nop			; (mov r8, r8)
 770:	00000115 	.word	0x00000115

00000774 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
 774:	b580      	push	{r7, lr}
 776:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
 778:	4b02      	ldr	r3, [pc, #8]	; (784 <system_interrupt_leave_critical_section+0x10>)
 77a:	4798      	blx	r3
}
 77c:	46c0      	nop			; (mov r8, r8)
 77e:	46bd      	mov	sp, r7
 780:	bd80      	pop	{r7, pc}
 782:	46c0      	nop			; (mov r8, r8)
 784:	00000169 	.word	0x00000169

00000788 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
 788:	b580      	push	{r7, lr}
 78a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
 78c:	4b05      	ldr	r3, [pc, #20]	; (7a4 <system_gclk_is_syncing+0x1c>)
 78e:	785b      	ldrb	r3, [r3, #1]
 790:	b2db      	uxtb	r3, r3
 792:	b25b      	sxtb	r3, r3
 794:	2b00      	cmp	r3, #0
 796:	da01      	bge.n	79c <system_gclk_is_syncing+0x14>
		return true;
 798:	2301      	movs	r3, #1
 79a:	e000      	b.n	79e <system_gclk_is_syncing+0x16>
	}

	return false;
 79c:	2300      	movs	r3, #0
}
 79e:	0018      	movs	r0, r3
 7a0:	46bd      	mov	sp, r7
 7a2:	bd80      	pop	{r7, pc}
 7a4:	40000c00 	.word	0x40000c00

000007a8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
 7a8:	b580      	push	{r7, lr}
 7aa:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
 7ac:	2108      	movs	r1, #8
 7ae:	2000      	movs	r0, #0
 7b0:	4b07      	ldr	r3, [pc, #28]	; (7d0 <system_gclk_init+0x28>)
 7b2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
 7b4:	4b07      	ldr	r3, [pc, #28]	; (7d4 <system_gclk_init+0x2c>)
 7b6:	2201      	movs	r2, #1
 7b8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
 7ba:	46c0      	nop			; (mov r8, r8)
 7bc:	4b05      	ldr	r3, [pc, #20]	; (7d4 <system_gclk_init+0x2c>)
 7be:	781b      	ldrb	r3, [r3, #0]
 7c0:	b2db      	uxtb	r3, r3
 7c2:	001a      	movs	r2, r3
 7c4:	2301      	movs	r3, #1
 7c6:	4013      	ands	r3, r2
 7c8:	d1f8      	bne.n	7bc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
 7ca:	46c0      	nop			; (mov r8, r8)
 7cc:	46bd      	mov	sp, r7
 7ce:	bd80      	pop	{r7, pc}
 7d0:	00000705 	.word	0x00000705
 7d4:	40000c00 	.word	0x40000c00

000007d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
 7d8:	b580      	push	{r7, lr}
 7da:	b086      	sub	sp, #24
 7dc:	af00      	add	r7, sp, #0
 7de:	0002      	movs	r2, r0
 7e0:	6039      	str	r1, [r7, #0]
 7e2:	1dfb      	adds	r3, r7, #7
 7e4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
 7e6:	1dfb      	adds	r3, r7, #7
 7e8:	781b      	ldrb	r3, [r3, #0]
 7ea:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
 7ec:	1dfb      	adds	r3, r7, #7
 7ee:	781b      	ldrb	r3, [r3, #0]
 7f0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
 7f2:	683b      	ldr	r3, [r7, #0]
 7f4:	781b      	ldrb	r3, [r3, #0]
 7f6:	021b      	lsls	r3, r3, #8
 7f8:	001a      	movs	r2, r3
 7fa:	697b      	ldr	r3, [r7, #20]
 7fc:	4313      	orrs	r3, r2
 7fe:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
 800:	683b      	ldr	r3, [r7, #0]
 802:	785b      	ldrb	r3, [r3, #1]
 804:	2b00      	cmp	r3, #0
 806:	d004      	beq.n	812 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
 808:	697b      	ldr	r3, [r7, #20]
 80a:	2280      	movs	r2, #128	; 0x80
 80c:	02d2      	lsls	r2, r2, #11
 80e:	4313      	orrs	r3, r2
 810:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
 812:	683b      	ldr	r3, [r7, #0]
 814:	7a5b      	ldrb	r3, [r3, #9]
 816:	2b00      	cmp	r3, #0
 818:	d004      	beq.n	824 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
 81a:	697b      	ldr	r3, [r7, #20]
 81c:	2280      	movs	r2, #128	; 0x80
 81e:	0312      	lsls	r2, r2, #12
 820:	4313      	orrs	r3, r2
 822:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
 824:	683b      	ldr	r3, [r7, #0]
 826:	685b      	ldr	r3, [r3, #4]
 828:	2b01      	cmp	r3, #1
 82a:	d92c      	bls.n	886 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
 82c:	683b      	ldr	r3, [r7, #0]
 82e:	685a      	ldr	r2, [r3, #4]
 830:	683b      	ldr	r3, [r7, #0]
 832:	685b      	ldr	r3, [r3, #4]
 834:	3b01      	subs	r3, #1
 836:	4013      	ands	r3, r2
 838:	d11a      	bne.n	870 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
 83a:	2300      	movs	r3, #0
 83c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
 83e:	2302      	movs	r3, #2
 840:	60bb      	str	r3, [r7, #8]
 842:	e005      	b.n	850 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
 844:	68fb      	ldr	r3, [r7, #12]
 846:	3301      	adds	r3, #1
 848:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
 84a:	68bb      	ldr	r3, [r7, #8]
 84c:	005b      	lsls	r3, r3, #1
 84e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
 850:	683b      	ldr	r3, [r7, #0]
 852:	685a      	ldr	r2, [r3, #4]
 854:	68bb      	ldr	r3, [r7, #8]
 856:	429a      	cmp	r2, r3
 858:	d8f4      	bhi.n	844 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
 85a:	68fb      	ldr	r3, [r7, #12]
 85c:	021b      	lsls	r3, r3, #8
 85e:	693a      	ldr	r2, [r7, #16]
 860:	4313      	orrs	r3, r2
 862:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
 864:	697b      	ldr	r3, [r7, #20]
 866:	2280      	movs	r2, #128	; 0x80
 868:	0352      	lsls	r2, r2, #13
 86a:	4313      	orrs	r3, r2
 86c:	617b      	str	r3, [r7, #20]
 86e:	e00a      	b.n	886 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
 870:	683b      	ldr	r3, [r7, #0]
 872:	685b      	ldr	r3, [r3, #4]
 874:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
 876:	693a      	ldr	r2, [r7, #16]
 878:	4313      	orrs	r3, r2
 87a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
 87c:	697b      	ldr	r3, [r7, #20]
 87e:	2280      	movs	r2, #128	; 0x80
 880:	0292      	lsls	r2, r2, #10
 882:	4313      	orrs	r3, r2
 884:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
 886:	683b      	ldr	r3, [r7, #0]
 888:	7a1b      	ldrb	r3, [r3, #8]
 88a:	2b00      	cmp	r3, #0
 88c:	d004      	beq.n	898 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
 88e:	697b      	ldr	r3, [r7, #20]
 890:	2280      	movs	r2, #128	; 0x80
 892:	0392      	lsls	r2, r2, #14
 894:	4313      	orrs	r3, r2
 896:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
 898:	46c0      	nop			; (mov r8, r8)
 89a:	4b13      	ldr	r3, [pc, #76]	; (8e8 <system_gclk_gen_set_config+0x110>)
 89c:	4798      	blx	r3
 89e:	1e03      	subs	r3, r0, #0
 8a0:	d1fb      	bne.n	89a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
 8a2:	4b12      	ldr	r3, [pc, #72]	; (8ec <system_gclk_gen_set_config+0x114>)
 8a4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
 8a6:	4a12      	ldr	r2, [pc, #72]	; (8f0 <system_gclk_gen_set_config+0x118>)
 8a8:	1dfb      	adds	r3, r7, #7
 8aa:	781b      	ldrb	r3, [r3, #0]
 8ac:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
 8ae:	46c0      	nop			; (mov r8, r8)
 8b0:	4b0d      	ldr	r3, [pc, #52]	; (8e8 <system_gclk_gen_set_config+0x110>)
 8b2:	4798      	blx	r3
 8b4:	1e03      	subs	r3, r0, #0
 8b6:	d1fb      	bne.n	8b0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
 8b8:	4b0e      	ldr	r3, [pc, #56]	; (8f4 <system_gclk_gen_set_config+0x11c>)
 8ba:	693a      	ldr	r2, [r7, #16]
 8bc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
 8be:	46c0      	nop			; (mov r8, r8)
 8c0:	4b09      	ldr	r3, [pc, #36]	; (8e8 <system_gclk_gen_set_config+0x110>)
 8c2:	4798      	blx	r3
 8c4:	1e03      	subs	r3, r0, #0
 8c6:	d1fb      	bne.n	8c0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
 8c8:	4b0a      	ldr	r3, [pc, #40]	; (8f4 <system_gclk_gen_set_config+0x11c>)
 8ca:	4a0a      	ldr	r2, [pc, #40]	; (8f4 <system_gclk_gen_set_config+0x11c>)
 8cc:	6851      	ldr	r1, [r2, #4]
 8ce:	2280      	movs	r2, #128	; 0x80
 8d0:	0252      	lsls	r2, r2, #9
 8d2:	4011      	ands	r1, r2
 8d4:	697a      	ldr	r2, [r7, #20]
 8d6:	430a      	orrs	r2, r1
 8d8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
 8da:	4b07      	ldr	r3, [pc, #28]	; (8f8 <system_gclk_gen_set_config+0x120>)
 8dc:	4798      	blx	r3
}
 8de:	46c0      	nop			; (mov r8, r8)
 8e0:	46bd      	mov	sp, r7
 8e2:	b006      	add	sp, #24
 8e4:	bd80      	pop	{r7, pc}
 8e6:	46c0      	nop			; (mov r8, r8)
 8e8:	00000789 	.word	0x00000789
 8ec:	00000761 	.word	0x00000761
 8f0:	40000c08 	.word	0x40000c08
 8f4:	40000c00 	.word	0x40000c00
 8f8:	00000775 	.word	0x00000775

000008fc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
 8fc:	b580      	push	{r7, lr}
 8fe:	b082      	sub	sp, #8
 900:	af00      	add	r7, sp, #0
 902:	0002      	movs	r2, r0
 904:	1dfb      	adds	r3, r7, #7
 906:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
 908:	46c0      	nop			; (mov r8, r8)
 90a:	4b0e      	ldr	r3, [pc, #56]	; (944 <system_gclk_gen_enable+0x48>)
 90c:	4798      	blx	r3
 90e:	1e03      	subs	r3, r0, #0
 910:	d1fb      	bne.n	90a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
 912:	4b0d      	ldr	r3, [pc, #52]	; (948 <system_gclk_gen_enable+0x4c>)
 914:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
 916:	4a0d      	ldr	r2, [pc, #52]	; (94c <system_gclk_gen_enable+0x50>)
 918:	1dfb      	adds	r3, r7, #7
 91a:	781b      	ldrb	r3, [r3, #0]
 91c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
 91e:	46c0      	nop			; (mov r8, r8)
 920:	4b08      	ldr	r3, [pc, #32]	; (944 <system_gclk_gen_enable+0x48>)
 922:	4798      	blx	r3
 924:	1e03      	subs	r3, r0, #0
 926:	d1fb      	bne.n	920 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
 928:	4b09      	ldr	r3, [pc, #36]	; (950 <system_gclk_gen_enable+0x54>)
 92a:	4a09      	ldr	r2, [pc, #36]	; (950 <system_gclk_gen_enable+0x54>)
 92c:	6852      	ldr	r2, [r2, #4]
 92e:	2180      	movs	r1, #128	; 0x80
 930:	0249      	lsls	r1, r1, #9
 932:	430a      	orrs	r2, r1
 934:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
 936:	4b07      	ldr	r3, [pc, #28]	; (954 <system_gclk_gen_enable+0x58>)
 938:	4798      	blx	r3
}
 93a:	46c0      	nop			; (mov r8, r8)
 93c:	46bd      	mov	sp, r7
 93e:	b002      	add	sp, #8
 940:	bd80      	pop	{r7, pc}
 942:	46c0      	nop			; (mov r8, r8)
 944:	00000789 	.word	0x00000789
 948:	00000761 	.word	0x00000761
 94c:	40000c04 	.word	0x40000c04
 950:	40000c00 	.word	0x40000c00
 954:	00000775 	.word	0x00000775

00000958 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
 958:	b580      	push	{r7, lr}
 95a:	b084      	sub	sp, #16
 95c:	af00      	add	r7, sp, #0
 95e:	0002      	movs	r2, r0
 960:	6039      	str	r1, [r7, #0]
 962:	1dfb      	adds	r3, r7, #7
 964:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
 966:	1dfb      	adds	r3, r7, #7
 968:	781b      	ldrb	r3, [r3, #0]
 96a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
 96c:	683b      	ldr	r3, [r7, #0]
 96e:	781b      	ldrb	r3, [r3, #0]
 970:	021b      	lsls	r3, r3, #8
 972:	001a      	movs	r2, r3
 974:	68fb      	ldr	r3, [r7, #12]
 976:	4313      	orrs	r3, r2
 978:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
 97a:	1dfb      	adds	r3, r7, #7
 97c:	781b      	ldrb	r3, [r3, #0]
 97e:	0018      	movs	r0, r3
 980:	4b04      	ldr	r3, [pc, #16]	; (994 <system_gclk_chan_set_config+0x3c>)
 982:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
 984:	4b04      	ldr	r3, [pc, #16]	; (998 <system_gclk_chan_set_config+0x40>)
 986:	68fa      	ldr	r2, [r7, #12]
 988:	b292      	uxth	r2, r2
 98a:	805a      	strh	r2, [r3, #2]
}
 98c:	46c0      	nop			; (mov r8, r8)
 98e:	46bd      	mov	sp, r7
 990:	b004      	add	sp, #16
 992:	bd80      	pop	{r7, pc}
 994:	0000099d 	.word	0x0000099d
 998:	40000c00 	.word	0x40000c00

0000099c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
 99c:	b580      	push	{r7, lr}
 99e:	b084      	sub	sp, #16
 9a0:	af00      	add	r7, sp, #0
 9a2:	0002      	movs	r2, r0
 9a4:	1dfb      	adds	r3, r7, #7
 9a6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
 9a8:	4b1c      	ldr	r3, [pc, #112]	; (a1c <system_gclk_chan_disable+0x80>)
 9aa:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
 9ac:	4a1c      	ldr	r2, [pc, #112]	; (a20 <system_gclk_chan_disable+0x84>)
 9ae:	1dfb      	adds	r3, r7, #7
 9b0:	781b      	ldrb	r3, [r3, #0]
 9b2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
 9b4:	4b1b      	ldr	r3, [pc, #108]	; (a24 <system_gclk_chan_disable+0x88>)
 9b6:	885b      	ldrh	r3, [r3, #2]
 9b8:	051b      	lsls	r3, r3, #20
 9ba:	0f1b      	lsrs	r3, r3, #28
 9bc:	b2db      	uxtb	r3, r3
 9be:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
 9c0:	4a18      	ldr	r2, [pc, #96]	; (a24 <system_gclk_chan_disable+0x88>)
 9c2:	8853      	ldrh	r3, [r2, #2]
 9c4:	4918      	ldr	r1, [pc, #96]	; (a28 <system_gclk_chan_disable+0x8c>)
 9c6:	400b      	ands	r3, r1
 9c8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
 9ca:	4a16      	ldr	r2, [pc, #88]	; (a24 <system_gclk_chan_disable+0x88>)
 9cc:	4b15      	ldr	r3, [pc, #84]	; (a24 <system_gclk_chan_disable+0x88>)
 9ce:	885b      	ldrh	r3, [r3, #2]
 9d0:	b29b      	uxth	r3, r3
 9d2:	4916      	ldr	r1, [pc, #88]	; (a2c <system_gclk_chan_disable+0x90>)
 9d4:	400b      	ands	r3, r1
 9d6:	b29b      	uxth	r3, r3
 9d8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
 9da:	46c0      	nop			; (mov r8, r8)
 9dc:	4b11      	ldr	r3, [pc, #68]	; (a24 <system_gclk_chan_disable+0x88>)
 9de:	885b      	ldrh	r3, [r3, #2]
 9e0:	b29b      	uxth	r3, r3
 9e2:	001a      	movs	r2, r3
 9e4:	2380      	movs	r3, #128	; 0x80
 9e6:	01db      	lsls	r3, r3, #7
 9e8:	4013      	ands	r3, r2
 9ea:	d1f7      	bne.n	9dc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
 9ec:	4a0d      	ldr	r2, [pc, #52]	; (a24 <system_gclk_chan_disable+0x88>)
 9ee:	68fb      	ldr	r3, [r7, #12]
 9f0:	b2db      	uxtb	r3, r3
 9f2:	1c19      	adds	r1, r3, #0
 9f4:	230f      	movs	r3, #15
 9f6:	400b      	ands	r3, r1
 9f8:	b2d9      	uxtb	r1, r3
 9fa:	8853      	ldrh	r3, [r2, #2]
 9fc:	1c08      	adds	r0, r1, #0
 9fe:	210f      	movs	r1, #15
 a00:	4001      	ands	r1, r0
 a02:	0208      	lsls	r0, r1, #8
 a04:	4908      	ldr	r1, [pc, #32]	; (a28 <system_gclk_chan_disable+0x8c>)
 a06:	400b      	ands	r3, r1
 a08:	1c19      	adds	r1, r3, #0
 a0a:	1c03      	adds	r3, r0, #0
 a0c:	430b      	orrs	r3, r1
 a0e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
 a10:	4b07      	ldr	r3, [pc, #28]	; (a30 <system_gclk_chan_disable+0x94>)
 a12:	4798      	blx	r3
}
 a14:	46c0      	nop			; (mov r8, r8)
 a16:	46bd      	mov	sp, r7
 a18:	b004      	add	sp, #16
 a1a:	bd80      	pop	{r7, pc}
 a1c:	00000761 	.word	0x00000761
 a20:	40000c02 	.word	0x40000c02
 a24:	40000c00 	.word	0x40000c00
 a28:	fffff0ff 	.word	0xfffff0ff
 a2c:	ffffbfff 	.word	0xffffbfff
 a30:	00000775 	.word	0x00000775

00000a34 <system_pinmux_get_group_from_gpio_pin>:
{
 a34:	b580      	push	{r7, lr}
 a36:	b084      	sub	sp, #16
 a38:	af00      	add	r7, sp, #0
 a3a:	0002      	movs	r2, r0
 a3c:	1dfb      	adds	r3, r7, #7
 a3e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
 a40:	230f      	movs	r3, #15
 a42:	18fb      	adds	r3, r7, r3
 a44:	1dfa      	adds	r2, r7, #7
 a46:	7812      	ldrb	r2, [r2, #0]
 a48:	09d2      	lsrs	r2, r2, #7
 a4a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
 a4c:	230e      	movs	r3, #14
 a4e:	18fb      	adds	r3, r7, r3
 a50:	1dfa      	adds	r2, r7, #7
 a52:	7812      	ldrb	r2, [r2, #0]
 a54:	0952      	lsrs	r2, r2, #5
 a56:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
 a58:	4b0d      	ldr	r3, [pc, #52]	; (a90 <system_pinmux_get_group_from_gpio_pin+0x5c>)
 a5a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
 a5c:	230f      	movs	r3, #15
 a5e:	18fb      	adds	r3, r7, r3
 a60:	781b      	ldrb	r3, [r3, #0]
 a62:	2b00      	cmp	r3, #0
 a64:	d10f      	bne.n	a86 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
 a66:	230f      	movs	r3, #15
 a68:	18fb      	adds	r3, r7, r3
 a6a:	781b      	ldrb	r3, [r3, #0]
 a6c:	009b      	lsls	r3, r3, #2
 a6e:	2210      	movs	r2, #16
 a70:	4694      	mov	ip, r2
 a72:	44bc      	add	ip, r7
 a74:	4463      	add	r3, ip
 a76:	3b08      	subs	r3, #8
 a78:	681a      	ldr	r2, [r3, #0]
 a7a:	230e      	movs	r3, #14
 a7c:	18fb      	adds	r3, r7, r3
 a7e:	781b      	ldrb	r3, [r3, #0]
 a80:	01db      	lsls	r3, r3, #7
 a82:	18d3      	adds	r3, r2, r3
 a84:	e000      	b.n	a88 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
 a86:	2300      	movs	r3, #0
}
 a88:	0018      	movs	r0, r3
 a8a:	46bd      	mov	sp, r7
 a8c:	b004      	add	sp, #16
 a8e:	bd80      	pop	{r7, pc}
 a90:	41004400 	.word	0x41004400

00000a94 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
 a94:	b580      	push	{r7, lr}
 a96:	b088      	sub	sp, #32
 a98:	af00      	add	r7, sp, #0
 a9a:	60f8      	str	r0, [r7, #12]
 a9c:	60b9      	str	r1, [r7, #8]
 a9e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
 aa0:	2300      	movs	r3, #0
 aa2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
 aa4:	687b      	ldr	r3, [r7, #4]
 aa6:	78db      	ldrb	r3, [r3, #3]
 aa8:	2201      	movs	r2, #1
 aaa:	4053      	eors	r3, r2
 aac:	b2db      	uxtb	r3, r3
 aae:	2b00      	cmp	r3, #0
 ab0:	d035      	beq.n	b1e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
 ab2:	687b      	ldr	r3, [r7, #4]
 ab4:	781b      	ldrb	r3, [r3, #0]
 ab6:	2b80      	cmp	r3, #128	; 0x80
 ab8:	d00b      	beq.n	ad2 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
 aba:	69fb      	ldr	r3, [r7, #28]
 abc:	2280      	movs	r2, #128	; 0x80
 abe:	0252      	lsls	r2, r2, #9
 ac0:	4313      	orrs	r3, r2
 ac2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
 ac4:	687b      	ldr	r3, [r7, #4]
 ac6:	781b      	ldrb	r3, [r3, #0]
 ac8:	061b      	lsls	r3, r3, #24
 aca:	001a      	movs	r2, r3
 acc:	69fb      	ldr	r3, [r7, #28]
 ace:	4313      	orrs	r3, r2
 ad0:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 ad2:	687b      	ldr	r3, [r7, #4]
 ad4:	785b      	ldrb	r3, [r3, #1]
 ad6:	2b00      	cmp	r3, #0
 ad8:	d003      	beq.n	ae2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
 ada:	687b      	ldr	r3, [r7, #4]
 adc:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
 ade:	2b02      	cmp	r3, #2
 ae0:	d110      	bne.n	b04 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
 ae2:	69fb      	ldr	r3, [r7, #28]
 ae4:	2280      	movs	r2, #128	; 0x80
 ae6:	0292      	lsls	r2, r2, #10
 ae8:	4313      	orrs	r3, r2
 aea:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
 aec:	687b      	ldr	r3, [r7, #4]
 aee:	789b      	ldrb	r3, [r3, #2]
 af0:	2b00      	cmp	r3, #0
 af2:	d004      	beq.n	afe <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
 af4:	69fb      	ldr	r3, [r7, #28]
 af6:	2280      	movs	r2, #128	; 0x80
 af8:	02d2      	lsls	r2, r2, #11
 afa:	4313      	orrs	r3, r2
 afc:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
 afe:	68fb      	ldr	r3, [r7, #12]
 b00:	68ba      	ldr	r2, [r7, #8]
 b02:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 b04:	687b      	ldr	r3, [r7, #4]
 b06:	785b      	ldrb	r3, [r3, #1]
 b08:	2b01      	cmp	r3, #1
 b0a:	d003      	beq.n	b14 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
 b0c:	687b      	ldr	r3, [r7, #4]
 b0e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 b10:	2b02      	cmp	r3, #2
 b12:	d107      	bne.n	b24 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
 b14:	69fb      	ldr	r3, [r7, #28]
 b16:	4a22      	ldr	r2, [pc, #136]	; (ba0 <_system_pinmux_config+0x10c>)
 b18:	4013      	ands	r3, r2
 b1a:	61fb      	str	r3, [r7, #28]
 b1c:	e002      	b.n	b24 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
 b1e:	68fb      	ldr	r3, [r7, #12]
 b20:	68ba      	ldr	r2, [r7, #8]
 b22:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
 b24:	68bb      	ldr	r3, [r7, #8]
 b26:	041b      	lsls	r3, r3, #16
 b28:	0c1b      	lsrs	r3, r3, #16
 b2a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
 b2c:	68bb      	ldr	r3, [r7, #8]
 b2e:	0c1b      	lsrs	r3, r3, #16
 b30:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 b32:	69ba      	ldr	r2, [r7, #24]
 b34:	69fb      	ldr	r3, [r7, #28]
 b36:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
 b38:	22a0      	movs	r2, #160	; 0xa0
 b3a:	05d2      	lsls	r2, r2, #23
 b3c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 b3e:	68fb      	ldr	r3, [r7, #12]
 b40:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 b42:	697a      	ldr	r2, [r7, #20]
 b44:	69fb      	ldr	r3, [r7, #28]
 b46:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
 b48:	22d0      	movs	r2, #208	; 0xd0
 b4a:	0612      	lsls	r2, r2, #24
 b4c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
 b4e:	68fb      	ldr	r3, [r7, #12]
 b50:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
 b52:	687b      	ldr	r3, [r7, #4]
 b54:	78db      	ldrb	r3, [r3, #3]
 b56:	2201      	movs	r2, #1
 b58:	4053      	eors	r3, r2
 b5a:	b2db      	uxtb	r3, r3
 b5c:	2b00      	cmp	r3, #0
 b5e:	d01a      	beq.n	b96 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
 b60:	69fa      	ldr	r2, [r7, #28]
 b62:	2380      	movs	r3, #128	; 0x80
 b64:	02db      	lsls	r3, r3, #11
 b66:	4013      	ands	r3, r2
 b68:	d00a      	beq.n	b80 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
 b6a:	687b      	ldr	r3, [r7, #4]
 b6c:	789b      	ldrb	r3, [r3, #2]
 b6e:	2b01      	cmp	r3, #1
 b70:	d103      	bne.n	b7a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
 b72:	68fb      	ldr	r3, [r7, #12]
 b74:	68ba      	ldr	r2, [r7, #8]
 b76:	619a      	str	r2, [r3, #24]
 b78:	e002      	b.n	b80 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
 b7a:	68fb      	ldr	r3, [r7, #12]
 b7c:	68ba      	ldr	r2, [r7, #8]
 b7e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 b80:	687b      	ldr	r3, [r7, #4]
 b82:	785b      	ldrb	r3, [r3, #1]
 b84:	2b01      	cmp	r3, #1
 b86:	d003      	beq.n	b90 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
 b88:	687b      	ldr	r3, [r7, #4]
 b8a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
 b8c:	2b02      	cmp	r3, #2
 b8e:	d102      	bne.n	b96 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
 b90:	68fb      	ldr	r3, [r7, #12]
 b92:	68ba      	ldr	r2, [r7, #8]
 b94:	609a      	str	r2, [r3, #8]
		}
	}
}
 b96:	46c0      	nop			; (mov r8, r8)
 b98:	46bd      	mov	sp, r7
 b9a:	b008      	add	sp, #32
 b9c:	bd80      	pop	{r7, pc}
 b9e:	46c0      	nop			; (mov r8, r8)
 ba0:	fffbffff 	.word	0xfffbffff

00000ba4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
 ba4:	b580      	push	{r7, lr}
 ba6:	b084      	sub	sp, #16
 ba8:	af00      	add	r7, sp, #0
 baa:	0002      	movs	r2, r0
 bac:	6039      	str	r1, [r7, #0]
 bae:	1dfb      	adds	r3, r7, #7
 bb0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
 bb2:	1dfb      	adds	r3, r7, #7
 bb4:	781b      	ldrb	r3, [r3, #0]
 bb6:	0018      	movs	r0, r3
 bb8:	4b0a      	ldr	r3, [pc, #40]	; (be4 <system_pinmux_pin_set_config+0x40>)
 bba:	4798      	blx	r3
 bbc:	0003      	movs	r3, r0
 bbe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
 bc0:	1dfb      	adds	r3, r7, #7
 bc2:	781b      	ldrb	r3, [r3, #0]
 bc4:	221f      	movs	r2, #31
 bc6:	4013      	ands	r3, r2
 bc8:	2201      	movs	r2, #1
 bca:	409a      	lsls	r2, r3
 bcc:	0013      	movs	r3, r2
 bce:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
 bd0:	683a      	ldr	r2, [r7, #0]
 bd2:	68b9      	ldr	r1, [r7, #8]
 bd4:	68fb      	ldr	r3, [r7, #12]
 bd6:	0018      	movs	r0, r3
 bd8:	4b03      	ldr	r3, [pc, #12]	; (be8 <system_pinmux_pin_set_config+0x44>)
 bda:	4798      	blx	r3
}
 bdc:	46c0      	nop			; (mov r8, r8)
 bde:	46bd      	mov	sp, r7
 be0:	b004      	add	sp, #16
 be2:	bd80      	pop	{r7, pc}
 be4:	00000a35 	.word	0x00000a35
 be8:	00000a95 	.word	0x00000a95

00000bec <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
 bec:	b580      	push	{r7, lr}
 bee:	af00      	add	r7, sp, #0
	return;
 bf0:	46c0      	nop			; (mov r8, r8)
}
 bf2:	46bd      	mov	sp, r7
 bf4:	bd80      	pop	{r7, pc}
	...

00000bf8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
 bf8:	b580      	push	{r7, lr}
 bfa:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
 bfc:	4b06      	ldr	r3, [pc, #24]	; (c18 <system_init+0x20>)
 bfe:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
 c00:	4b06      	ldr	r3, [pc, #24]	; (c1c <system_init+0x24>)
 c02:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
 c04:	4b06      	ldr	r3, [pc, #24]	; (c20 <system_init+0x28>)
 c06:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
 c08:	4b06      	ldr	r3, [pc, #24]	; (c24 <system_init+0x2c>)
 c0a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
 c0c:	4b06      	ldr	r3, [pc, #24]	; (c28 <system_init+0x30>)
 c0e:	4798      	blx	r3
}
 c10:	46c0      	nop			; (mov r8, r8)
 c12:	46bd      	mov	sp, r7
 c14:	bd80      	pop	{r7, pc}
 c16:	46c0      	nop			; (mov r8, r8)
 c18:	00000631 	.word	0x00000631
 c1c:	000002a5 	.word	0x000002a5
 c20:	00000bed 	.word	0x00000bed
 c24:	00000bed 	.word	0x00000bed
 c28:	00000bed 	.word	0x00000bed

00000c2c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 c2c:	b580      	push	{r7, lr}
 c2e:	b082      	sub	sp, #8
 c30:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
 c32:	4b2f      	ldr	r3, [pc, #188]	; (cf0 <Reset_Handler+0xc4>)
 c34:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
 c36:	4b2f      	ldr	r3, [pc, #188]	; (cf4 <Reset_Handler+0xc8>)
 c38:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
 c3a:	687a      	ldr	r2, [r7, #4]
 c3c:	683b      	ldr	r3, [r7, #0]
 c3e:	429a      	cmp	r2, r3
 c40:	d00c      	beq.n	c5c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
 c42:	e007      	b.n	c54 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
 c44:	683b      	ldr	r3, [r7, #0]
 c46:	1d1a      	adds	r2, r3, #4
 c48:	603a      	str	r2, [r7, #0]
 c4a:	687a      	ldr	r2, [r7, #4]
 c4c:	1d11      	adds	r1, r2, #4
 c4e:	6079      	str	r1, [r7, #4]
 c50:	6812      	ldr	r2, [r2, #0]
 c52:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
 c54:	683a      	ldr	r2, [r7, #0]
 c56:	4b28      	ldr	r3, [pc, #160]	; (cf8 <Reset_Handler+0xcc>)
 c58:	429a      	cmp	r2, r3
 c5a:	d3f3      	bcc.n	c44 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 c5c:	4b27      	ldr	r3, [pc, #156]	; (cfc <Reset_Handler+0xd0>)
 c5e:	603b      	str	r3, [r7, #0]
 c60:	e004      	b.n	c6c <Reset_Handler+0x40>
                *pDest++ = 0;
 c62:	683b      	ldr	r3, [r7, #0]
 c64:	1d1a      	adds	r2, r3, #4
 c66:	603a      	str	r2, [r7, #0]
 c68:	2200      	movs	r2, #0
 c6a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
 c6c:	683a      	ldr	r2, [r7, #0]
 c6e:	4b24      	ldr	r3, [pc, #144]	; (d00 <Reset_Handler+0xd4>)
 c70:	429a      	cmp	r2, r3
 c72:	d3f6      	bcc.n	c62 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
 c74:	4b23      	ldr	r3, [pc, #140]	; (d04 <Reset_Handler+0xd8>)
 c76:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 c78:	4b23      	ldr	r3, [pc, #140]	; (d08 <Reset_Handler+0xdc>)
 c7a:	687a      	ldr	r2, [r7, #4]
 c7c:	21ff      	movs	r1, #255	; 0xff
 c7e:	438a      	bics	r2, r1
 c80:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 c82:	4a22      	ldr	r2, [pc, #136]	; (d0c <Reset_Handler+0xe0>)
 c84:	2390      	movs	r3, #144	; 0x90
 c86:	005b      	lsls	r3, r3, #1
 c88:	2102      	movs	r1, #2
 c8a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 c8c:	4a20      	ldr	r2, [pc, #128]	; (d10 <Reset_Handler+0xe4>)
 c8e:	78d3      	ldrb	r3, [r2, #3]
 c90:	2103      	movs	r1, #3
 c92:	438b      	bics	r3, r1
 c94:	1c19      	adds	r1, r3, #0
 c96:	2302      	movs	r3, #2
 c98:	430b      	orrs	r3, r1
 c9a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 c9c:	4a1c      	ldr	r2, [pc, #112]	; (d10 <Reset_Handler+0xe4>)
 c9e:	78d3      	ldrb	r3, [r2, #3]
 ca0:	210c      	movs	r1, #12
 ca2:	438b      	bics	r3, r1
 ca4:	1c19      	adds	r1, r3, #0
 ca6:	2308      	movs	r3, #8
 ca8:	430b      	orrs	r3, r1
 caa:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 cac:	4a19      	ldr	r2, [pc, #100]	; (d14 <Reset_Handler+0xe8>)
 cae:	7b93      	ldrb	r3, [r2, #14]
 cb0:	2130      	movs	r1, #48	; 0x30
 cb2:	438b      	bics	r3, r1
 cb4:	1c19      	adds	r1, r3, #0
 cb6:	2320      	movs	r3, #32
 cb8:	430b      	orrs	r3, r1
 cba:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 cbc:	4a15      	ldr	r2, [pc, #84]	; (d14 <Reset_Handler+0xe8>)
 cbe:	7b93      	ldrb	r3, [r2, #14]
 cc0:	210c      	movs	r1, #12
 cc2:	438b      	bics	r3, r1
 cc4:	1c19      	adds	r1, r3, #0
 cc6:	2308      	movs	r3, #8
 cc8:	430b      	orrs	r3, r1
 cca:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 ccc:	4a11      	ldr	r2, [pc, #68]	; (d14 <Reset_Handler+0xe8>)
 cce:	7b93      	ldrb	r3, [r2, #14]
 cd0:	2103      	movs	r1, #3
 cd2:	438b      	bics	r3, r1
 cd4:	1c19      	adds	r1, r3, #0
 cd6:	2302      	movs	r3, #2
 cd8:	430b      	orrs	r3, r1
 cda:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 cdc:	4a0e      	ldr	r2, [pc, #56]	; (d18 <Reset_Handler+0xec>)
 cde:	6853      	ldr	r3, [r2, #4]
 ce0:	2180      	movs	r1, #128	; 0x80
 ce2:	430b      	orrs	r3, r1
 ce4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 ce6:	4b0d      	ldr	r3, [pc, #52]	; (d1c <Reset_Handler+0xf0>)
 ce8:	4798      	blx	r3

        /* Branch to main function */
        main();
 cea:	4b0d      	ldr	r3, [pc, #52]	; (d20 <Reset_Handler+0xf4>)
 cec:	4798      	blx	r3

        /* Infinite loop */
        while (1);
 cee:	e7fe      	b.n	cee <Reset_Handler+0xc2>
 cf0:	00000f10 	.word	0x00000f10
 cf4:	20000000 	.word	0x20000000
 cf8:	20000004 	.word	0x20000004
 cfc:	20000004 	.word	0x20000004
 d00:	20000040 	.word	0x20000040
 d04:	00000000 	.word	0x00000000
 d08:	e000ed00 	.word	0xe000ed00
 d0c:	41007000 	.word	0x41007000
 d10:	41005000 	.word	0x41005000
 d14:	41004800 	.word	0x41004800
 d18:	41004000 	.word	0x41004000
 d1c:	00000e85 	.word	0x00000e85
 d20:	00000e49 	.word	0x00000e49

00000d24 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 d24:	b580      	push	{r7, lr}
 d26:	af00      	add	r7, sp, #0
        while (1) {
 d28:	e7fe      	b.n	d28 <Dummy_Handler+0x4>
	...

00000d2c <system_pinmux_get_group_from_gpio_pin>:
{
 d2c:	b580      	push	{r7, lr}
 d2e:	b084      	sub	sp, #16
 d30:	af00      	add	r7, sp, #0
 d32:	0002      	movs	r2, r0
 d34:	1dfb      	adds	r3, r7, #7
 d36:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
 d38:	230f      	movs	r3, #15
 d3a:	18fb      	adds	r3, r7, r3
 d3c:	1dfa      	adds	r2, r7, #7
 d3e:	7812      	ldrb	r2, [r2, #0]
 d40:	09d2      	lsrs	r2, r2, #7
 d42:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
 d44:	230e      	movs	r3, #14
 d46:	18fb      	adds	r3, r7, r3
 d48:	1dfa      	adds	r2, r7, #7
 d4a:	7812      	ldrb	r2, [r2, #0]
 d4c:	0952      	lsrs	r2, r2, #5
 d4e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
 d50:	4b0d      	ldr	r3, [pc, #52]	; (d88 <system_pinmux_get_group_from_gpio_pin+0x5c>)
 d52:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
 d54:	230f      	movs	r3, #15
 d56:	18fb      	adds	r3, r7, r3
 d58:	781b      	ldrb	r3, [r3, #0]
 d5a:	2b00      	cmp	r3, #0
 d5c:	d10f      	bne.n	d7e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
 d5e:	230f      	movs	r3, #15
 d60:	18fb      	adds	r3, r7, r3
 d62:	781b      	ldrb	r3, [r3, #0]
 d64:	009b      	lsls	r3, r3, #2
 d66:	2210      	movs	r2, #16
 d68:	4694      	mov	ip, r2
 d6a:	44bc      	add	ip, r7
 d6c:	4463      	add	r3, ip
 d6e:	3b08      	subs	r3, #8
 d70:	681a      	ldr	r2, [r3, #0]
 d72:	230e      	movs	r3, #14
 d74:	18fb      	adds	r3, r7, r3
 d76:	781b      	ldrb	r3, [r3, #0]
 d78:	01db      	lsls	r3, r3, #7
 d7a:	18d3      	adds	r3, r2, r3
 d7c:	e000      	b.n	d80 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
 d7e:	2300      	movs	r3, #0
}
 d80:	0018      	movs	r0, r3
 d82:	46bd      	mov	sp, r7
 d84:	b004      	add	sp, #16
 d86:	bd80      	pop	{r7, pc}
 d88:	41004400 	.word	0x41004400

00000d8c <port_get_group_from_gpio_pin>:
{
 d8c:	b580      	push	{r7, lr}
 d8e:	b082      	sub	sp, #8
 d90:	af00      	add	r7, sp, #0
 d92:	0002      	movs	r2, r0
 d94:	1dfb      	adds	r3, r7, #7
 d96:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
 d98:	1dfb      	adds	r3, r7, #7
 d9a:	781b      	ldrb	r3, [r3, #0]
 d9c:	0018      	movs	r0, r3
 d9e:	4b03      	ldr	r3, [pc, #12]	; (dac <port_get_group_from_gpio_pin+0x20>)
 da0:	4798      	blx	r3
 da2:	0003      	movs	r3, r0
}
 da4:	0018      	movs	r0, r3
 da6:	46bd      	mov	sp, r7
 da8:	b002      	add	sp, #8
 daa:	bd80      	pop	{r7, pc}
 dac:	00000d2d 	.word	0x00000d2d

00000db0 <port_pin_get_input_level>:
{
 db0:	b580      	push	{r7, lr}
 db2:	b084      	sub	sp, #16
 db4:	af00      	add	r7, sp, #0
 db6:	0002      	movs	r2, r0
 db8:	1dfb      	adds	r3, r7, #7
 dba:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
 dbc:	1dfb      	adds	r3, r7, #7
 dbe:	781b      	ldrb	r3, [r3, #0]
 dc0:	0018      	movs	r0, r3
 dc2:	4b0b      	ldr	r3, [pc, #44]	; (df0 <port_pin_get_input_level+0x40>)
 dc4:	4798      	blx	r3
 dc6:	0003      	movs	r3, r0
 dc8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
 dca:	1dfb      	adds	r3, r7, #7
 dcc:	781b      	ldrb	r3, [r3, #0]
 dce:	221f      	movs	r2, #31
 dd0:	4013      	ands	r3, r2
 dd2:	2201      	movs	r2, #1
 dd4:	409a      	lsls	r2, r3
 dd6:	0013      	movs	r3, r2
 dd8:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
 dda:	68fb      	ldr	r3, [r7, #12]
 ddc:	6a1b      	ldr	r3, [r3, #32]
 dde:	68ba      	ldr	r2, [r7, #8]
 de0:	4013      	ands	r3, r2
 de2:	1e5a      	subs	r2, r3, #1
 de4:	4193      	sbcs	r3, r2
 de6:	b2db      	uxtb	r3, r3
}
 de8:	0018      	movs	r0, r3
 dea:	46bd      	mov	sp, r7
 dec:	b004      	add	sp, #16
 dee:	bd80      	pop	{r7, pc}
 df0:	00000d8d 	.word	0x00000d8d

00000df4 <port_pin_set_output_level>:
{
 df4:	b580      	push	{r7, lr}
 df6:	b084      	sub	sp, #16
 df8:	af00      	add	r7, sp, #0
 dfa:	0002      	movs	r2, r0
 dfc:	1dfb      	adds	r3, r7, #7
 dfe:	701a      	strb	r2, [r3, #0]
 e00:	1dbb      	adds	r3, r7, #6
 e02:	1c0a      	adds	r2, r1, #0
 e04:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
 e06:	1dfb      	adds	r3, r7, #7
 e08:	781b      	ldrb	r3, [r3, #0]
 e0a:	0018      	movs	r0, r3
 e0c:	4b0d      	ldr	r3, [pc, #52]	; (e44 <port_pin_set_output_level+0x50>)
 e0e:	4798      	blx	r3
 e10:	0003      	movs	r3, r0
 e12:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
 e14:	1dfb      	adds	r3, r7, #7
 e16:	781b      	ldrb	r3, [r3, #0]
 e18:	221f      	movs	r2, #31
 e1a:	4013      	ands	r3, r2
 e1c:	2201      	movs	r2, #1
 e1e:	409a      	lsls	r2, r3
 e20:	0013      	movs	r3, r2
 e22:	60bb      	str	r3, [r7, #8]
	if (level) {
 e24:	1dbb      	adds	r3, r7, #6
 e26:	781b      	ldrb	r3, [r3, #0]
 e28:	2b00      	cmp	r3, #0
 e2a:	d003      	beq.n	e34 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
 e2c:	68fb      	ldr	r3, [r7, #12]
 e2e:	68ba      	ldr	r2, [r7, #8]
 e30:	619a      	str	r2, [r3, #24]
}
 e32:	e002      	b.n	e3a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
 e34:	68fb      	ldr	r3, [r7, #12]
 e36:	68ba      	ldr	r2, [r7, #8]
 e38:	615a      	str	r2, [r3, #20]
}
 e3a:	46c0      	nop			; (mov r8, r8)
 e3c:	46bd      	mov	sp, r7
 e3e:	b004      	add	sp, #16
 e40:	bd80      	pop	{r7, pc}
 e42:	46c0      	nop			; (mov r8, r8)
 e44:	00000d8d 	.word	0x00000d8d

00000e48 <main>:
 * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
 */
#include <asf.h>

int main (void)
{
 e48:	b580      	push	{r7, lr}
 e4a:	af00      	add	r7, sp, #0
	system_init();
 e4c:	4b0a      	ldr	r3, [pc, #40]	; (e78 <main+0x30>)
 e4e:	4798      	blx	r3
	/* Insert application code here, after the board has been initialized. */

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
 e50:	200f      	movs	r0, #15
 e52:	4b0a      	ldr	r3, [pc, #40]	; (e7c <main+0x34>)
 e54:	4798      	blx	r3
 e56:	0003      	movs	r3, r0
 e58:	001a      	movs	r2, r3
 e5a:	2301      	movs	r3, #1
 e5c:	4053      	eors	r3, r2
 e5e:	b2db      	uxtb	r3, r3
 e60:	2b00      	cmp	r3, #0
 e62:	d004      	beq.n	e6e <main+0x26>
			/* Yes, so turn LED on. */
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
 e64:	2100      	movs	r1, #0
 e66:	203e      	movs	r0, #62	; 0x3e
 e68:	4b05      	ldr	r3, [pc, #20]	; (e80 <main+0x38>)
 e6a:	4798      	blx	r3
 e6c:	e7f0      	b.n	e50 <main+0x8>
		} else {
			/* No, so turn LED off. */
			port_pin_set_output_level(LED_0_PIN, !LED_0_ACTIVE);
 e6e:	2101      	movs	r1, #1
 e70:	203e      	movs	r0, #62	; 0x3e
 e72:	4b03      	ldr	r3, [pc, #12]	; (e80 <main+0x38>)
 e74:	4798      	blx	r3
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
 e76:	e7eb      	b.n	e50 <main+0x8>
 e78:	00000bf9 	.word	0x00000bf9
 e7c:	00000db1 	.word	0x00000db1
 e80:	00000df5 	.word	0x00000df5

00000e84 <__libc_init_array>:
 e84:	b570      	push	{r4, r5, r6, lr}
 e86:	2600      	movs	r6, #0
 e88:	4d0c      	ldr	r5, [pc, #48]	; (ebc <__libc_init_array+0x38>)
 e8a:	4c0d      	ldr	r4, [pc, #52]	; (ec0 <__libc_init_array+0x3c>)
 e8c:	1b64      	subs	r4, r4, r5
 e8e:	10a4      	asrs	r4, r4, #2
 e90:	42a6      	cmp	r6, r4
 e92:	d109      	bne.n	ea8 <__libc_init_array+0x24>
 e94:	2600      	movs	r6, #0
 e96:	f000 f82b 	bl	ef0 <_init>
 e9a:	4d0a      	ldr	r5, [pc, #40]	; (ec4 <__libc_init_array+0x40>)
 e9c:	4c0a      	ldr	r4, [pc, #40]	; (ec8 <__libc_init_array+0x44>)
 e9e:	1b64      	subs	r4, r4, r5
 ea0:	10a4      	asrs	r4, r4, #2
 ea2:	42a6      	cmp	r6, r4
 ea4:	d105      	bne.n	eb2 <__libc_init_array+0x2e>
 ea6:	bd70      	pop	{r4, r5, r6, pc}
 ea8:	00b3      	lsls	r3, r6, #2
 eaa:	58eb      	ldr	r3, [r5, r3]
 eac:	4798      	blx	r3
 eae:	3601      	adds	r6, #1
 eb0:	e7ee      	b.n	e90 <__libc_init_array+0xc>
 eb2:	00b3      	lsls	r3, r6, #2
 eb4:	58eb      	ldr	r3, [r5, r3]
 eb6:	4798      	blx	r3
 eb8:	3601      	adds	r6, #1
 eba:	e7f2      	b.n	ea2 <__libc_init_array+0x1e>
 ebc:	00000efc 	.word	0x00000efc
 ec0:	00000efc 	.word	0x00000efc
 ec4:	00000efc 	.word	0x00000efc
 ec8:	00000f00 	.word	0x00000f00
 ecc:	00000588 	.word	0x00000588
 ed0:	000005d8 	.word	0x000005d8
 ed4:	000005d8 	.word	0x000005d8
 ed8:	000005d4 	.word	0x000005d4
 edc:	0000057a 	.word	0x0000057a
 ee0:	0000059a 	.word	0x0000059a
 ee4:	0000056a 	.word	0x0000056a
 ee8:	000005ac 	.word	0x000005ac
 eec:	000005be 	.word	0x000005be

00000ef0 <_init>:
 ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 ef2:	46c0      	nop			; (mov r8, r8)
 ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 ef6:	bc08      	pop	{r3}
 ef8:	469e      	mov	lr, r3
 efa:	4770      	bx	lr

00000efc <__init_array_start>:
 efc:	000000dd 	.word	0x000000dd

00000f00 <_fini>:
 f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 f02:	46c0      	nop			; (mov r8, r8)
 f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 f06:	bc08      	pop	{r3}
 f08:	469e      	mov	lr, r3
 f0a:	4770      	bx	lr

00000f0c <__fini_array_start>:
 f0c:	000000b5 	.word	0x000000b5
